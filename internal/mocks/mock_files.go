// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LaurenceGA/go-crev/internal/files (interfaces: AppDirs)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAppDirs is a mock of AppDirs interface
type MockAppDirs struct {
	ctrl     *gomock.Controller
	recorder *MockAppDirsMockRecorder
}

// MockAppDirsMockRecorder is the mock recorder for MockAppDirs
type MockAppDirsMockRecorder struct {
	mock *MockAppDirs
}

// NewMockAppDirs creates a new mock instance
func NewMockAppDirs(ctrl *gomock.Controller) *MockAppDirs {
	mock := &MockAppDirs{ctrl: ctrl}
	mock.recorder = &MockAppDirsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppDirs) EXPECT() *MockAppDirsMockRecorder {
	return m.recorder
}

// ConfigFile mocks base method
func (m *MockAppDirs) ConfigFile() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFile")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigFile indicates an expected call of ConfigFile
func (mr *MockAppDirsMockRecorder) ConfigFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFile", reflect.TypeOf((*MockAppDirs)(nil).ConfigFile))
}

// Data mocks base method
func (m *MockAppDirs) Data() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Data indicates an expected call of Data
func (mr *MockAppDirsMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockAppDirs)(nil).Data))
}
