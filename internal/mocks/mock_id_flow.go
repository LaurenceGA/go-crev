// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LaurenceGA/go-crev/internal/command/flow (interfaces: ConfigManipulator,GithubUser)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	github "github.com/LaurenceGA/go-crev/internal/github"
	id "github.com/LaurenceGA/go-crev/internal/id"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigManipulator is a mock of ConfigManipulator interface
type MockConfigManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManipulatorMockRecorder
}

// MockConfigManipulatorMockRecorder is the mock recorder for MockConfigManipulator
type MockConfigManipulatorMockRecorder struct {
	mock *MockConfigManipulator
}

// NewMockConfigManipulator creates a new mock instance
func NewMockConfigManipulator(ctrl *gomock.Controller) *MockConfigManipulator {
	mock := &MockConfigManipulator{ctrl: ctrl}
	mock.recorder = &MockConfigManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigManipulator) EXPECT() *MockConfigManipulatorMockRecorder {
	return m.recorder
}

// SetCurrentID mocks base method
func (m *MockConfigManipulator) SetCurrentID(arg0 *id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentID indicates an expected call of SetCurrentID
func (mr *MockConfigManipulatorMockRecorder) SetCurrentID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentID", reflect.TypeOf((*MockConfigManipulator)(nil).SetCurrentID), arg0)
}

// SetCurrentStore mocks base method
func (m *MockConfigManipulator) SetCurrentStore(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentStore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentStore indicates an expected call of SetCurrentStore
func (mr *MockConfigManipulatorMockRecorder) SetCurrentStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentStore", reflect.TypeOf((*MockConfigManipulator)(nil).SetCurrentStore), arg0)
}

// MockGithubUser is a mock of GithubUser interface
type MockGithubUser struct {
	ctrl     *gomock.Controller
	recorder *MockGithubUserMockRecorder
}

// MockGithubUserMockRecorder is the mock recorder for MockGithubUser
type MockGithubUserMockRecorder struct {
	mock *MockGithubUser
}

// NewMockGithubUser creates a new mock instance
func NewMockGithubUser(ctrl *gomock.Controller) *MockGithubUser {
	mock := &MockGithubUser{ctrl: ctrl}
	mock.recorder = &MockGithubUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubUser) EXPECT() *MockGithubUserMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockGithubUser) GetUser(arg0 context.Context, arg1 string) (*github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockGithubUserMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGithubUser)(nil).GetUser), arg0, arg1)
}
