// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LaurenceGA/go-crev/internal/command/flow/trust (interfaces: ConfigReader,Github,Prompter,KeyLoader)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	config "github.com/LaurenceGA/go-crev/internal/config"
	github "github.com/LaurenceGA/go-crev/internal/github"
	gomock "github.com/golang/mock/gomock"
	ssh "golang.org/x/crypto/ssh"
	reflect "reflect"
)

// MockConfigReader is a mock of ConfigReader interface
type MockConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReaderMockRecorder
}

// MockConfigReaderMockRecorder is the mock recorder for MockConfigReader
type MockConfigReaderMockRecorder struct {
	mock *MockConfigReader
}

// NewMockConfigReader creates a new mock instance
func NewMockConfigReader(ctrl *gomock.Controller) *MockConfigReader {
	mock := &MockConfigReader{ctrl: ctrl}
	mock.recorder = &MockConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigReader) EXPECT() *MockConfigReaderMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockConfigReader) Load() (*config.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*config.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockConfigReaderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigReader)(nil).Load))
}

// MockGithub is a mock of Github interface
type MockGithub struct {
	ctrl     *gomock.Controller
	recorder *MockGithubMockRecorder
}

// MockGithubMockRecorder is the mock recorder for MockGithub
type MockGithubMockRecorder struct {
	mock *MockGithub
}

// NewMockGithub creates a new mock instance
func NewMockGithub(ctrl *gomock.Controller) *MockGithub {
	mock := &MockGithub{ctrl: ctrl}
	mock.recorder = &MockGithubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithub) EXPECT() *MockGithubMockRecorder {
	return m.recorder
}

// GetRepository mocks base method
func (m *MockGithub) GetRepository(arg0 context.Context, arg1, arg2 string) (*github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockGithubMockRecorder) GetRepository(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockGithub)(nil).GetRepository), arg0, arg1, arg2)
}

// GetUser mocks base method
func (m *MockGithub) GetUser(arg0 context.Context, arg1 string) (*github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockGithubMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGithub)(nil).GetUser), arg0, arg1)
}

// MockPrompter is a mock of Prompter interface
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// Prompt mocks base method
func (m *MockPrompter) Prompt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt
func (mr *MockPrompterMockRecorder) Prompt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockPrompter)(nil).Prompt), arg0)
}

// Select mocks base method
func (m *MockPrompter) Select(arg0 string, arg1 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockPrompterMockRecorder) Select(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockPrompter)(nil).Select), arg0, arg1)
}

// MockKeyLoader is a mock of KeyLoader interface
type MockKeyLoader struct {
	ctrl     *gomock.Controller
	recorder *MockKeyLoaderMockRecorder
}

// MockKeyLoaderMockRecorder is the mock recorder for MockKeyLoader
type MockKeyLoaderMockRecorder struct {
	mock *MockKeyLoader
}

// NewMockKeyLoader creates a new mock instance
func NewMockKeyLoader(ctrl *gomock.Controller) *MockKeyLoader {
	mock := &MockKeyLoader{ctrl: ctrl}
	mock.recorder = &MockKeyLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyLoader) EXPECT() *MockKeyLoaderMockRecorder {
	return m.recorder
}

// LoadKey mocks base method
func (m *MockKeyLoader) LoadKey(arg0 string) (ssh.Signer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadKey", arg0)
	ret0, _ := ret[0].(ssh.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadKey indicates an expected call of LoadKey
func (mr *MockKeyLoaderMockRecorder) LoadKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKey", reflect.TypeOf((*MockKeyLoader)(nil).LoadKey), arg0)
}
